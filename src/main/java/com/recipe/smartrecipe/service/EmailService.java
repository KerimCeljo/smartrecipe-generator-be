package com.recipe.smartrecipe.service;

import com.sendgrid.Method;
import com.sendgrid.Request;
import com.sendgrid.Response;
import com.sendgrid.SendGrid;
import com.sendgrid.helpers.mail.Mail;
import com.sendgrid.helpers.mail.objects.Content;
import com.sendgrid.helpers.mail.objects.Email;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.IOException;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

    @Value("${sendgrid.api.key}")
    private String sendGridApiKey;

    @Value("${sendgrid.from.email}")
    private String fromEmail;

    @Value("${sendgrid.from.name}")
    private String fromName;

    /**
     * Send a recipe via email using SendGrid
     * @param toEmail recipient email address
     * @param recipeContent the recipe content to send
     * @param recipeTitle title for the email
     * @return true if email sent successfully, false otherwise
     */
    public boolean sendRecipeEmail(String toEmail, String recipeContent, String recipeTitle) {
        try {
            log.info("Attempting to send email to: {}", toEmail);
            log.info("From email: {}, From name: {}", fromEmail, fromName);
            log.info("API key present: {}", sendGridApiKey != null && !sendGridApiKey.isEmpty());
            
            Email from = new Email(fromEmail, fromName);
            Email to = new Email(toEmail);
            
            String subject = "🍳 Your Recipe: " + recipeTitle;
            String htmlContent = createHtmlEmail(recipeContent, recipeTitle);
            String textContent = createTextEmail(recipeContent, recipeTitle);
            
            // SendGrid requires text/plain first, then text/html
            Content textContentObj = new Content("text/plain", textContent);
            Content htmlContentObj = new Content("text/html", htmlContent);
            
            Mail mail = new Mail(from, subject, to, textContentObj);
            mail.addContent(htmlContentObj);
            
            SendGrid sg = new SendGrid(sendGridApiKey);
            Request request = new Request();
            request.setMethod(Method.POST);
            request.setEndpoint("mail/send");
            request.setBody(mail.build());
            
            Response response = sg.api(request);
            
            if (response.getStatusCode() >= 200 && response.getStatusCode() < 300) {
                log.info("Recipe email sent successfully to: {}", toEmail);
                return true;
            } else {
                log.error("Failed to send recipe email. Status: {}, Body: {}", 
                         response.getStatusCode(), response.getBody());
                return false;
            }
            
        } catch (IOException e) {
            log.error("Error sending recipe email to {}: {}", toEmail, e.getMessage());
            return false;
        }
    }

    /**
     * Create HTML version of the email
     */
    private String createHtmlEmail(String recipeContent, String recipeTitle) {
        return String.format("""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Your Recipe</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background: linear-gradient(135deg, #e74c3c 0%%, #c0392b 100%%); 
                             color: white; padding: 30px; border-radius: 10px; text-align: center; }
                    .recipe-content { background: #f8f9fa; padding: 25px; border-radius: 10px; 
                                    margin: 20px 0; border-left: 5px solid #e74c3c; }
                    .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
                    .btn { display: inline-block; background: #e74c3c; color: white; 
                           padding: 12px 25px; text-decoration: none; border-radius: 5px; 
                           margin: 10px 5px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>🍳 Smart Recipe Generator</h1>
                        <p>Your delicious recipe is ready!</p>
                    </div>
                    
                    <div class="recipe-content">
                        <h2>%s</h2>
                        <pre style="white-space: pre-wrap; font-family: inherit;">%s</pre>
                    </div>
                    
                    <div class="footer">
                        <p>Generated by Smart Recipe Generator</p>
                        <p>Happy cooking! 👨‍🍳</p>
                    </div>
                </div>
            </body>
            </html>
            """, recipeTitle, recipeContent);
    }

    /**
     * Create plain text version of the email
     */
    private String createTextEmail(String recipeContent, String recipeTitle) {
        return String.format("""
            🍳 Smart Recipe Generator
            
            Your Recipe: %s
            
            %s
            
            ---
            Generated by Smart Recipe Generator
            Happy cooking! 👨‍🍳
            """, recipeTitle, recipeContent);
    }
}
